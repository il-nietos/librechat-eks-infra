name: Terraform CI/CD

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, closed]

env: 
  AWS_REGION: "eu-central-1"
  TF_VERSION: "1.11.0"

jobs:
  terraform-plan:
    if: github.event_name == 'pull_request'
    name: Terraform Plan
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: terraform/envs/${{ (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && 'test') || (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop' && 'dev') || 'INVALID' }}

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout github repository
        uses: actions/checkout@v4

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION}}

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION}}
      
      - name: Terraform init
        run: terraform init

      - name: Terraform validate
        run: terraform validate

      - name: Check destroy conditions
        id: check-destroy
        run: |
          title="${{ github.event.pull_request.title }}"
          labels='${{ toJson(github.event.pull_request.labels.*.name) }}'
      
          if [[ "${{ github.event_name }}" == "pull_request" && \
                "$title" == *destroy* && \
                "$labels" == *'"destroy"'* ]]; then
            echo "destroy=true" >> $GITHUB_OUTPUT
          else
            echo "destroy=false" >> $GITHUB_OUTPUT
          fi  

      - name: Terraform plan
        if: steps.check-destroy.outputs.destroy != 'true'
        run: terraform plan -out=tfplan
      
      - name: Terraform destroy plan
        if: steps.check-destroy.outputs.destroy == 'true'
        run: terraform plan -destroy -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}/tfplan
          retention-days: 1
    
  terraform-apply:
    name: Terraform Execute plan
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      (github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'develop')
    needs: terraform-plan
    runs-on: ubuntu-latest
    env: 
      TF_WORKING_DIR: terraform/envs/${{ (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && 'test') || (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop' && 'dev') || 'INVALID' }}

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:

      - name: Checkout github repository
        uses: actions/checkout@v4

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION}}

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION}}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.TF_WORKING_DIR }}/tfplan
          name: tfplan

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
